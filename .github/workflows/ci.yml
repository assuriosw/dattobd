---
name: ci
on:
  - push

env:
  AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION:    ${{ secrets.AWS_REGION }}

jobs:
  build-packages:
    name: Build Packages
    runs-on:
      - metal
      - ${{ matrix.arch }}
    env:
      FS: ext2 ext3 ext4 xfs

    strategy:
      # Do not cancel all jobs when one is failing. The CI of the driver is fast.
      # But the fast failure hinders to observe possible errors on other distros.
      fail-fast: false
      matrix:
        distro: [
          amazon2,
          centos7, centos8,
          debian8, debian9, debian10, debian11,
          fedora31, fedora32, fedora34, fedora35, fedora36,
          ubuntu2004, ubuntu2204
        ]
        arch: [ amd64 ]
        include:
          - distro: amazon2
            arch: arm64
          - distro: centos8
            arch: arm64
          - distro: debian10
            arch: arm64
          - distro: debian11
            arch: arm64
          - distro: fedora35
            arch: arm64
          - distro: fedora36
            arch: arm64
          - distro: ubuntu2204
            arch: arm64

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set ENV
        if: always()
        env:
          DISTRO: ${{ matrix.distro }}
          ARCH:   ${{ matrix.arch }}
        run: .github/scripts/set_env.sh

      - name: Check ENV
        run: .github/scripts/check_env.sh

      - name: Start a box
        if: always()
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: .github/scripts/start_box.sh

      - name: Boot Fedora 32 into kernel 5.9
        if: "${{ matrix.distro == 'fedora32' && matrix.arch == 'amd64' }}"
        run: |
          vagrant ssh ${{env.INSTANCE_NAME}} -c '
            sudo yum localinstall -y https://kojipkgs.fedoraproject.org//packages/kernel/5.9.16/100.fc32/x86_64/kernel-core-5.9.16-100.fc32.x86_64.rpm
            sudo yum localinstall -y https://kojipkgs.fedoraproject.org//packages/kernel/5.9.16/100.fc32/x86_64/kernel-modules-5.9.16-100.fc32.x86_64.rpm
            sudo yum localinstall -y https://kojipkgs.fedoraproject.org//packages/kernel/5.9.16/100.fc32/x86_64/kernel-5.9.16-100.fc32.x86_64.rpm
            sudo yum localinstall -y https://kojipkgs.fedoraproject.org//packages/kernel/5.9.16/100.fc32/x86_64/kernel-devel-5.9.16-100.fc32.x86_64.rpm
            sudo reboot now' || true
          sleep 5
        working-directory: ${{env.BOX_DIR}}

      # Please refer to https://github.com/elastio/devboxes/pull/230
      - name: Download debug package for Debian 11
        if: "${{ matrix.distro == 'debian11' && matrix.arch == 'arm64' }}"
        run: |
          vagrant ssh ${{env.INSTANCE_NAME}} -c '
            sudo apt-get install -y linux-image-$(uname -r)-dbg' || true
          sleep 5
        working-directory: ${{env.BOX_DIR}}

      # Amazon 2 has installed devtoolset-8 which upgrades GCC from 7.3.1 to 8.3.1.
      # The new gcc doesn't compile rpm packages properly, because of the /usr/lib/rpm/redhat/macros provided
      # by the package system-rpm-config-9.1.0-76.amzn2.0.13.noarch. And this macros has compilation flags applicable
      # for GCC 7 and already removed from GCC 8. The workaround is to disable devtoolset-8 on the next build step.
      - name: Remove devtoolset
        if: "${{ matrix.distro == 'amazon2' && matrix.arch == 'arm64' }}"
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c 'sudo rm /etc/profile.d/enable-llvm-toolset.sh'
        working-directory: ${{env.BOX_DIR}}

      - name: Install LVM and RAID tools
        if: "${{ matrix.distro != 'debian8' }}"
        run: |
          vagrant ssh ${{env.INSTANCE_NAME}} -c '
            if $(which apt-get >/dev/null 2>&1); then
              sudo apt-get install -y lvm2 mdadm;
            else
              # Fedora has rather weak mirrors. But we do not want to have failing builds because of this.
              for i in {1..5}; do
                sudo yum install -y lvm2 mdadm && break
                echo "Failed to install LVM and RAID packages. Retrying..."
                sleep 5
              done
              mdadm -V
            fi
          '
        working-directory: ${{env.BOX_DIR}}

      - name: Build packages
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c 'make ${PKG_TYPE}'
        working-directory: ${{env.BOX_DIR}}

      - name: Collect artifacts
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c 'repobuild/collect_artifacts.sh'
        working-directory: ${{env.BOX_DIR}}

      - name: Build kernel module
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c 'sudo make'
        working-directory: ${{env.BOX_DIR}}

      - name: Install kernel module
        run: |
          vagrant ssh ${{env.INSTANCE_NAME}} -c 'sudo make install'
          vagrant ssh ${{env.INSTANCE_NAME}} -c 'sudo make uninstall'
        working-directory: ${{env.BOX_DIR}}

      # FIXME: enable tests on XFS for all distros.
      # See https://github.com/elastio/elastio-snap/issues/139 about Debian 8
      # See https://github.com/elastio/elastio-snap/issues/138 about Ubuntu 22.04
      - name: Ignore XFS tests
        if: "${{ matrix.distro == 'debian8' || matrix.distro == 'ubuntu2204' }}"
        run:
          echo FS="ext2 ext3 ext4" >> $GITHUB_ENV

      - name: Run tests (loop device)
        run: |
          for fs in ${FS[*]}; do
            vagrant ssh ${{env.INSTANCE_NAME}} -c "cd tests && sudo ./elio-test.sh -f $fs"
          done
        working-directory: ${{env.BOX_DIR}}
        # For now tests are taking 10-20 seconds per 1 fs on amd64 and about 2 minutes on arm64. But they can hang.
        # 10 minutes seems to be reasonable timeout.
        timeout-minutes: 10

      - name: Show dmesg
        if: always()
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c "cat tests/dmesg.log; sudo dmesg -c"
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 1

      - name: Run tests on LVM (loop device)
        # FIXME: Enable tests on all distros after resolution of #147, #143, #138
        if: "${{ matrix.distro != 'debian8' && matrix.distro != 'debian11' && matrix.distro != 'ubuntu2204' && matrix.distro != 'fedora32' }}"
        run: |
          for fs in ${FS[*]}; do
            vagrant ssh ${{env.INSTANCE_NAME}} -c "cd tests && sudo ./elio-test.sh -f $fs --lvm"
          done
        working-directory: ${{env.BOX_DIR}}
        # For now tests are taking 10-20 seconds per 1 fs on amd64 and about 2 minutes on arm64. But they can hang.
        # 10 minutes seems to be reasonable timeout.
        timeout-minutes: 10

      - name: Show dmesg
        if: always()
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c "cat tests/dmesg.log; sudo dmesg -c"
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 1

      - name: Run tests on RAID (loop device)
        # FIXME: Enable tests on all distros after resolution of #146, #147, #143, #138
        if: "${{ matrix.distro != 'debian8' && matrix.distro != 'debian9' && matrix.distro != 'debian11' && matrix.distro != 'ubuntu2204' && matrix.distro != 'fedora32' }}"
        run: |
          for fs in ${FS[*]}; do
            vagrant ssh ${{env.INSTANCE_NAME}} -c "cd tests && sudo ./elio-test.sh -f $fs --raid"
          done
        working-directory: ${{env.BOX_DIR}}
        # For now tests are taking 10-20 seconds per 1 fs on amd64 and about 2 minutes on arm64. But they can hang.
        # 10 minutes seems to be reasonable timeout.
        timeout-minutes: 10

      - name: Show dmesg
        if: always()
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c "cat tests/dmesg.log; sudo dmesg -c"
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 1

      - name: Attach qcow2 disks
        run: |
          ARCH=$(uname -m)
          TEST_IMAGES=(${TEST_IMAGES})
          TEST_DRIVES=(${TEST_DRIVES})
          [ ${ARCH} != "x86_64" ] && VIRSH_FLAGS="--config" || true
          for i in ${!TEST_IMAGES[*]}; do
            qemu-img create -f qcow2 ${TEST_IMAGES[i]} 1G
            virsh attach-disk --domain ${BOX_DIR##*/}_${INSTANCE_NAME} --source ${TEST_IMAGES[i]} --target ${TEST_DRIVES[i]} --driver qemu --subdriver qcow2 --targetbus virtio ${VIRSH_FLAGS-}
          done
          # ARM64 boxes don't support "hot plug" w/o reboot
          if [ ${ARCH} != "x86_64" ]; then
            virsh destroy --domain ${BOX_DIR##*/}_${INSTANCE_NAME}
            virsh start --domain ${BOX_DIR##*/}_${INSTANCE_NAME}
            while ! vagrant ssh ${INSTANCE_NAME} -c 'uptime'; do
              echo "Waiting..."
              sleep 1
            done
          fi
          for drive in ${TEST_DRIVES[@]}; do
            vagrant ssh ${{env.INSTANCE_NAME}} -c "echo -e \"n\\np\\n\\n\\n\\nw\" | sudo fdisk /dev/$drive"
          done
        working-directory: ${{env.BOX_DIR}}

      - name: Run tests (qcow2 disk)
        run: |
          for fs in ${FS[*]}; do
            vagrant ssh ${{env.INSTANCE_NAME}} -c "cd tests && sudo ./elio-test.sh -d /dev/vdb1 -f $fs"
          done
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 10

      - name: Show dmesg
        if: always()
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c "cat tests/dmesg.log; sudo dmesg -c"
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 1

      - name: Run tests on LVM (qcow2 disks)
        # FIXME: Enable tests on all distros after resolution of #147, #143, #138
        if: "${{ matrix.distro != 'debian8' && matrix.distro != 'debian11' && matrix.distro != 'ubuntu2204' && matrix.distro != 'fedora32' }}"
        run: |
          for fs in ${FS[*]}; do
            vagrant ssh ${{env.INSTANCE_NAME}} -c "cd tests && sudo ./elio-test.sh -d /dev/vdb1 -d /dev/vdc1 -f $fs --lvm"
          done
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 10

      - name: Show dmesg
        if: always()
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c "cat tests/dmesg.log; sudo dmesg -c"
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 1

      - name: Run tests on RAID (qcow2 disks)
        # FIXME: Enable tests on all distros after resolution of #146, #147, #143, #138
        if: "${{ matrix.distro != 'debian8' && matrix.distro != 'debian9' && matrix.distro != 'debian11' && matrix.distro != 'ubuntu2204' && matrix.distro != 'fedora32' }}"
        run: |
          for fs in ${FS[*]}; do
            vagrant ssh ${{env.INSTANCE_NAME}} -c "cd tests && sudo ./elio-test.sh -d /dev/vdb1 -d /dev/vdc1 -f $fs --raid"
          done
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 10

      - name: Show dmesg
        if: always()
        run: vagrant ssh ${{env.INSTANCE_NAME}} -c "cat tests/dmesg.log; sudo dmesg -c"
        working-directory: ${{env.BOX_DIR}}
        timeout-minutes: 1

      - name: Detach external drives
        if: always()
        run: |
          TEST_IMAGES=(${TEST_IMAGES})
          for test_image in ${TEST_IMAGES[@]}; do
            if virsh domblklist ${BOX_DIR##*/}_${INSTANCE_NAME} --details | grep "file" | awk '{ print $NF }' | grep ${test_image} ; then
                virsh detach-disk --domain ${BOX_DIR##*/}_${INSTANCE_NAME} ${test_image}
            fi
            rm -f ${TEST_IMAGE}
          done

      - name: Upload artifacts
        run: |
          excl_ptrn="*GPG-KEY"
          # We have to avoid a race condition when package like elastio-snap-dkms_X.XX.XX-1debian11_all.deb is uploaded from
          # 2 Debian 11 VMs amd64 and arm64 at the same time to the same location.
          [ $(uname -m) != "x86_64" ] && [ -f /etc/debian_version ] && excl_ptrn=$excl_ptrn",*_all.deb" || true
          vagrant ssh ${{env.INSTANCE_NAME}} -c '
          if ! [[ ${SOURCE_BRANCH} =~ ^release ]] && ! [[ ${SOURCE_BRANCH} =~ ^master ]]; then \
            tag="--tag elastio:dev=true"; \
          fi; \
          AWS_SECRET_ACCESS_KEY='"'$AWS_SECRET_ACCESS_KEY'"' repobuild/upload.sh \
            --source repobuild/artifacts/ \
            --bucket artifacts.assur.io \
            --target /linux/elastio-snap/${SOURCE_BRANCH}/${GITHUB_RUN_NUMBER}/${PKG_TYPE} \
            ${tag} \
            --exclude '"'$excl_ptrn'"''
        working-directory: ${{env.BOX_DIR}}

      - name: Destroy a box
        if: always()
        run: .github/scripts/destroy_box.sh

  manifest:
    name: Artifacts manifest
    needs: build-packages
    runs-on:
      - baremetal

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Make manifest
        run: echo $GITHUB_RUN_NUMBER > latest && cat latest | grep -E '^[0-9]+$'

      - name: Upload manifest
        run: |
          branch=$(.github/scripts/detect_branch.sh)
          if ! [[ ${branch} =~ ^release ]] && ! [[ ${branch} =~ ^master ]]; then
            tag="--tag elastio:dev=true"
          fi
          repobuild/upload.sh \
            --source latest \
            --bucket artifacts.assur.io \
            --target /linux/elastio-snap/$branch \
            ${tag}

  dispatch-packaging-repo:
    name: Trigger repo upload
    needs: manifest
    runs-on:
      - baremetal

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Dispatch packaging repo
        env:
          REPO_HOOK_TOKEN: ${{ secrets.REPO_HOOK_TOKEN }}
        run: .github/scripts/dispatch_packaging.sh
